import java.util.NoSuchElementException;public final class LinkedQueue<E> implements QueueInterface<E> {	//----------------------------------------------------- Inner Node Class	private class Node {		private E data;		private Node next;				private Node(E next) {			this(next, null);		}		private Node(E data, Node next) {			this.data = data;			this.next = next;		}	}	//----------------------------------------------------------------------	//====================================================================== Properties	private Node first;	private Node last;	private int size;		//====================================================================== Constructors	public LinkedQueue() {		first = last = null;		size = 0;	}	//====================================================================== Methods	@Override	public boolean isEmpty() {		return (size == 0);	}		@Override	public void clear() {		first = last = null;		size = 0;	}		@Override	public int size() {		return size;	}		@Override	public boolean add(E newEntry) {		Node newNode = new Node(newEntry);				if(isEmpty()) {			first = newNode;			last = newNode;		} else {			last.next = newNode;			last = last.next;		}		size++;		return true;	}		// Returns null if empty	@Override	public E peek() {		if (isEmpty())			return null;		else			return first.data;	}		// Throws NoSuchElementException if empty	@Override	public E remove() {		E removed;		if (isEmpty()) {			throw new NoSuchElementException();		} else {			removed = first.data;			first = first.next;			size--;		}		return removed;	}		@Override	public String toString() {		if (size() == 0) return "";		String ret = "";		Node tmp = first;		while(tmp != null) {			ret += "->" + tmp.data;			tmp = tmp.next;			}		return ret.substring(2);	}		//----------------------------------------------- Personal Methods		}